// Generated by CoffeeScript 1.10.0
(function() {
  var ServiceManager, Services, _, fs, getMethodProxy, getServiceInterface, path, utils,
    slice = [].slice;

  path = require('path');

  fs = require('fs');

  _ = require('underscore');

  utils = require('./utils');

  Services = {};

  utils.registerClass(ServiceManager = (function() {
    function ServiceManager() {
      this.services = {};
    }

    ServiceManager.prototype.get = function(name) {
      if (_.has(this.services, name)) {
        return this.services[name];
      }
      return null;
    };

    ServiceManager.prototype.registerLocalClass = function(name) {
      var e, error, serviceClass;
      serviceClass = null;
      try {
        serviceClass = require("./service/" + name);
      } catch (error) {
        e = error;
        utils.log("local service class not found: " + name);
        throw e;
      }
      return this.services[name] = new serviceClass;
    };

    ServiceManager.prototype.registerProxyClass = function(name) {
      var i, intf, len, method, ref, service;
      intf = getServiceInterface(name);
      if (!intf) {
        utils.exit("proxy service class not found: " + name);
      }
      if (intf.name !== name) {
        utils.exit("proxy interface '" + intf.name + "' loaded when '" + name + "' requested");
      }
      service = {};
      ref = intf.methods;
      for (i = 0, len = ref.length; i < len; i++) {
        method = ref[i];
        service[method.name] = getMethodProxy(name, method.name);
      }
      return this.services[name] = service;
    };

    return ServiceManager;

  })());

  getMethodProxy = function(intfName, methodName) {
    return function() {
      var args, channel, channels, i, len, results;
      channels = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!_.isArray(channels)) {
        channels = [channels];
      }
      results = [];
      for (i = 0, len = channels.length; i < len; i++) {
        channel = channels[i];
        results.push(channel.sendMessage.apply(channel, [intfName, methodName].concat(slice.call(args))));
      }
      return results;
    };
  };

  getServiceInterface = function(name) {
    var contents, fileName, jsonName, serviceInterface;
    jsonName = name + ".json";
    fileName = path.join(utils.options.staticWebDir, 'interfaces', jsonName);
    if (!utils.fileExistsSync(fileName)) {
      return null;
    }
    contents = fs.readFileSync(fileName, 'utf8');
    serviceInterface = JSON.parse(contents);
    return serviceInterface.interfaces[0];
  };

  module.exports = new ServiceManager;

}).call(this);

//# sourceMappingURL=serviceManager.js.map

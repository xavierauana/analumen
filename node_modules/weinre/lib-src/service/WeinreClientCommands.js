// Generated by CoffeeScript 1.10.0
(function() {
  var WeinreClientCommands, WeinreClientEvents, _, channelManager, extensionManager, serviceManager, utils, weinre,
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  weinre = require('../weinre');

  utils = require('../utils');

  channelManager = require('../channelManager');

  serviceManager = require('../serviceManager');

  extensionManager = require('../extensionManager');

  WeinreClientEvents = serviceManager.get('WeinreClientEvents');

  module.exports = utils.registerClass(WeinreClientCommands = (function() {
    function WeinreClientCommands() {}

    WeinreClientCommands.prototype.registerClient = function(channel, callbackId) {
      var clients, key, options, ref, val;
      if (callbackId) {
        WeinreClientEvents.sendCallback(channel, callbackId, channel.description);
      }
      options = _.extend({}, utils.options);
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        val = options[key];
        if ((ref = typeof val) === 'number' || ref === 'boolean') {
          options[key] = "" + val;
        }
      }
      options.version = weinre.getVersion();
      WeinreClientEvents.serverProperties(channel, options);
      clients = channelManager.getClientChannels(channel.id);
      return WeinreClientEvents.clientRegistered(clients, channel.description);
    };

    WeinreClientCommands.prototype.getTargets = function(channel, callbackId) {
      var channels, result;
      channels = channelManager.getTargetChannels(channel.id);
      result = _.pluck(channels, 'description');
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId, [result]);
      }
    };

    WeinreClientCommands.prototype.getClients = function(channel, callbackId) {
      var channels, result;
      channels = channelManager.getClientChannels(channel.id);
      result = _.pluck(channels, 'description');
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId, [result]);
      }
    };

    WeinreClientCommands.prototype.getExtensions = function(channel, callbackId) {
      var extension, result;
      result = (function() {
        var i, len, ref, results;
        ref = extensionManager.extensions;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          extension = ref[i];
          results.push({
            startPage: "extensions/" + extension + "/extension.html"
          });
        }
        return results;
      })();
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId, [result]);
      }
    };

    WeinreClientCommands.prototype.connectTarget = function(channel, clientName, targetName, callbackId) {
      var client, target;
      client = channelManager.getChannel(clientName);
      if (!client) {
        return;
      }
      target = channelManager.getChannel(targetName);
      if (!target) {
        return;
      }
      channelManager.connectChannels(client, target);
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId);
      }
    };

    WeinreClientCommands.prototype.disconnectTarget = function(channel, clientName, callbackId) {
      var client, target;
      client = connectionManager.getClient(clientName);
      if (!client) {
        return;
      }
      target = client.getConnectedTarget();
      if (!target) {
        return;
      }
      connectionManager.disconnect(client, target);
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId);
      }
    };

    WeinreClientCommands.prototype.logDebug = function(channel, message, callbackId) {
      utils.logVerbose("client " + channel.name + ": " + message);
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId);
      }
    };

    WeinreClientCommands.prototype.logInfo = function(channel, message, callbackId) {
      utils.log("client " + channel.name + ": " + message);
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId);
      }
    };

    WeinreClientCommands.prototype.logWarning = function(channel, message, callbackId) {
      utils.log("client " + channel.name + ": " + message);
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId);
      }
    };

    WeinreClientCommands.prototype.logError = function(channel, message, callbackId) {
      utils.log("client " + channel.name + ": " + message);
      if (callbackId) {
        return WeinreClientEvents.sendCallback(channel, callbackId);
      }
    };

    return WeinreClientCommands;

  })());

}).call(this);

//# sourceMappingURL=WeinreClientCommands.js.map

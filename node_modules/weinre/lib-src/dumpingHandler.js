// Generated by CoffeeScript 1.10.0
(function() {
  var _, dumpResponse, dumpingHandler, enhance, utils;

  _ = require('underscore');

  utils = require('./utils');

  dumpingHandler = function(request, response, uri) {
    var element, i, len, originalSend, ref, results;
    originalSend = response.send;
    response.send = function(body) {
      return dumpResponse(originalSend, body, request, response, uri);
    };
    if (request.method !== 'POST') {
      return;
    }
    utils.logVerbose('--------------------------------------------------');
    utils.logVerbose(request.method + " " + uri + " [request]");
    if (_.isArray(request.body)) {
      ref = request.body;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        results.push(utils.logVerbose("   " + (enhance(JSON.parse(element)))));
      }
      return results;
    } else {
      return utils.logVerbose("   " + (enhance(request.body)));
    }
  };

  dumpResponse = function(originalSend, body, request, response, uri) {
    var e, element, error, i, len, ref, results;
    originalSend.call(response, body);
    if ((ref = request.method) !== 'GET' && ref !== 'POST') {
      return;
    }
    try {
      body = JSON.parse(body);
    } catch (error) {
      e = error;
      return;
    }
    if (_.isArray(body) && (body.length === 0)) {
      return;
    }
    utils.logVerbose('--------------------------------------------------');
    utils.logVerbose(request.method + " " + uri + " " + response.statusCode + " [response]");
    if (_.isArray(body)) {
      results = [];
      for (i = 0, len = body.length; i < len; i++) {
        element = body[i];
        results.push(utils.logVerbose("   " + (enhance(JSON.parse(element)))));
      }
      return results;
    } else {
      return utils.logVerbose("   " + (enhance(body)));
    }
  };

  enhance = function(object) {
    var args, signature;
    if (!object["interface"] || !object.method || !object.args) {
      return JSON.stringify(object);
    }
    signature = object["interface"] + "." + object.method;
    args = JSON.stringify(object.args);
    if (args.length > 500) {
      args = (args.substr(0, 50)) + "...";
    }
    return signature + "(" + args + ")";
  };

  module.exports = dumpingHandler;

}).call(this);

//# sourceMappingURL=dumpingHandler.js.map
